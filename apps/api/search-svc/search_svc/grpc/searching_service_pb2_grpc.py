# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from search_svc.grpc import searching_service_pb2 as searching__service__pb2


class SearchingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunIndexing = channel.unary_unary(
                '/SearchingService/RunIndexing',
                request_serializer=searching__service__pb2.IndexingRequest.SerializeToString,
                response_deserializer=searching__service__pb2.IndexingResponse.FromString,
                )
        self.RunSearch = channel.unary_unary(
                '/SearchingService/RunSearch',
                request_serializer=searching__service__pb2.SearchRequest.SerializeToString,
                response_deserializer=searching__service__pb2.SearchResponse.FromString,
                )


class SearchingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RunIndexing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SearchingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunIndexing': grpc.unary_unary_rpc_method_handler(
                    servicer.RunIndexing,
                    request_deserializer=searching__service__pb2.IndexingRequest.FromString,
                    response_serializer=searching__service__pb2.IndexingResponse.SerializeToString,
            ),
            'RunSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.RunSearch,
                    request_deserializer=searching__service__pb2.SearchRequest.FromString,
                    response_serializer=searching__service__pb2.SearchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SearchingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SearchingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RunIndexing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SearchingService/RunIndexing',
            searching__service__pb2.IndexingRequest.SerializeToString,
            searching__service__pb2.IndexingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SearchingService/RunSearch',
            searching__service__pb2.SearchRequest.SerializeToString,
            searching__service__pb2.SearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
